
 @title blip documentation
 @author Stephen Dawson-Haggerty stevedh@eecs.berkeley.edu
 @release public
---------------------------------------------------------------------

 1. Installation

 - This is only going to work on linux.

 - The recommended version of TinyOS is tinyos-2.1.  Other versions
   out of CVS are not recommended as there are transient problems
   which break things.  Epic platform support is unfortunately not
   available in 2.1; it is easy to backport, or else email me for a
   tarball with the backport.
   Make sure the c serial forwarder tools are built
   in $TOS_ROOT/support/sdk/c/sf.  You may need to run bootstrap,
   configure, and make in that folder to generate libmote.a.

 - Add two environment variables to your startup scripts:
     export LOWPAN_ROOT=~/svn/code/b6lowpan/
     export TOSMAKE_PATH="$TOSMAKE_PATH $LOWPAN_ROOT/support/make"

   where LOWPAN_ROOT is replaced with the path to the b6lowpan top
   level directory.

 - Install radvd, the IPv6 router advertisement daemon.  In
   debian, an 'apt-get install radvd' will do the trick.  Then, edit
   /etc/radvd.conf to enable router advertisements on tun0.  My file
   is below.

== /etc/radvd.conf ==
interface tun0
{
   AdvSendAdvert on;
   prefix 2001:470:1f04:56d::/64
   {
   };
};
== end /etc/radvd.conf --

 - Optionally, have a look at $TOS_ROOT/support/sdk/c/sf/serialsource.c.  
   There is an enum which defines ACK_TIMEOUT = 1000000 (one second in
   usecs).  This is much too long and will cause a lot of jitter when
   (not if) serial writes fail.  Changing it to 100000 is worthwhile.
   You will need to rebuild libmote.a by typing 'make' in that folder
   after making this change.

 - radvd seems to crash whenever its running and the interface
   disappears, so you may need to restart it every time you restart the
   driver.

 2. Building

 - Build a test app:
      * cd to $LOWPAN_ROOT/apps/UDPEcho/ and try typing `make <platform> lowpan`
 - Build the IEEE802.15.4 bridge to your computer
      * cd to $LOWPAN_ROOT/apps/IPBaseStation/ and `make <platform> lowpan`
 - Build the driver 
      * cd to $LOWPAN_ROOT/support/sdk/c/lib6lowpan and type `make`

 3. Running

 - Install IPBaseStation on a mote.  This will be your
       computer's interface to the world of low-power radio.

 - Start the driver (once you've built it)
      * cd $LOWPAN_ROOT/support/sdk/c/lib6lowpan/tunnel
      * edit the config file $LOWPAN_ROOT/support/sdk/c/lib6lowpan/tunnel/serial_tun.conf
         * set 'addr' you would like your computer's interface to use on the PAN
         * set 'proxy' to the network device you would like to proxy
                neighbor advertisements on
      * sudo ./serial_tun /dev/ttyUSB0 telosb
           (replace the port and baud with whatever you're using)
   The config file is assumed to be in the CWD when serial_tun starts;
       if this is not the case it may be specified using '-c <config file>'

 - The driver registers itself on the 2001:470:1f04:56d::/64
       subnet (or whatever you have specified in the config file).

 - Start radvd: `/etc/init.d/radvd start`.  The version I have
       segfaults if it is started without tun0 being present; do this
       after the driver is running.

 - If you program a few motes with UDPEcho, their addresses
       are formed as above, with the low two octets of the IPv6
       address comming from the 802.15.4 short address you programmed
       them with.

 - For instance, if you program a mote with ID 101, you can try
       ping6 2001:470:1f04:56d::65
       tracert6 2001:470:1f04:56d::65
       nc6 -u 2001:470:1f04:56d::65 7
       nc6 -u 2001:470:1f04:56d::65 61616
       
       UDPEcho runs an echo service on port 7, and a simple shell on
       port 61616; type 'help' for a list of commands.

 - The motes can also report back statistics every 15 seconds over
       UDP.  They will send these reports to an address specified in the
       application make file; however they are disabled by default.
       You can observe these statistics using the Listener.py
       script in $LOWPAN_ROOT/apps/UDPEcho/: `python Listener.py`.

 - serial_tun installs signal handlers for SIGUSR1 and SIGUSR2:
    * SIGUSR1: dump a graphviz file of the observed network topology.
      'dot' is part of the graphviz package.
         o sudo kill -s USR1 `pgrep serial_tun`
         o cd $LOWPAN_ROOT/support/sdk/c/lib6lowpan/tunnel
         o dot -Tps nwgraph.dot -o g.ps
         o gv g.ps
    * SIGUSR2: recompute source routes to all motes, and print them to
      the console
         * sudo kill -s USR2 `pgrep serial_tun`

 - A good way of understanding what is happening is to start wireshark
       on tun0; you should be able to observe the neighbor discovery
       process as motes boot.  You may also notice messages to
       ff05::1, which are routing updates; they are sent from an
       exponential timer with a maximum period of 5 minutes to inform
       the router of mote's presence; however, they are suppressed by
       data traffic since the routing updates will be piggybacked on it.
