
 1. Installation

 - This is only going to work on linux.

 - Add two environment variables to your startup scripts:
     export LOWPAN_ROOT=~/svn/code/b6lowpan/
     export TOSMAKE_PATH="$TOSMAKE_PATH $LOWPAN_ROOT/support/make"

   where LOWPAN_ROOT is replaced with the path to the b6lowpan top
   level directory.

 - Install radvd, the IPv6 router advertisement daemon.  In
   debian, an 'apt-get install radvd' will do the trick.  Then, edit
   /etc/radvd.conf to enable router advertisements on tun0.  My file
   is below:

 - Update to the latest CVS HEAD.  This works as of 'Tue Jun 24
   21:55:59 UTC 2008', so given problems try checking out as of this
   date.  Build (at least) libmote.a in support/sdk/c/sf/.

 - Optionally, have a look at $TOS_ROOT/support/sdk/c/sf/serialsource.c.  
   There is an enum which defines ACK_TIMEOUT = 1000000 (one second in
   usecs).  This is much too long and will cause a lot of jitter when
   (not if) serial writes fail.  Changing it to 100000 is worthwhile.
   You will need to rebuild libmote.a by typing 'make' in that folder
   after making this change.

 - radvd seems to crash whenever its running and the interface
   disappears, so you may need to restart it every time you restart the
   driver.

== /etc/radvd.conf ==
interface tun0
{
   AdvSendAdvert on;
   prefix 2001:470:1f04:56d::/64
   {
   };
};
== end /etc/radvd.conf --


 2. Building

 - Build a test app:
      * cd to $LOWPAN_ROOT/apps/UDPEcho/ and try typing `make <platform> lowpan`
 - Build the IEEE802.15.4 bridge to your computer
      * cd to $LOWPAN_ROOT/apps/IPBaseStation/ and `make <platform> lowpan`
 - Build the driver 
      * cd to $LOWPAN_ROOT/support/sdk/c/lib6lowpan and type `make`

 3. Running

 - Install IPBaseStation on a mote.  This will be your
       computer's interface to the world of low-power radio.

 - Start the driver (once you've built it)
      * cd $LOWPAN_ROOT/support/sdk/c/lib6lowpan/tunnel
      * sudo ./serial_tun /dev/ttyUSB0 telosb
           (replace the port and baud with whatever you're using)

 - The driver registers itself with the 2001:470:1f04:56d::/64
       network.  The address of your computer on the network is
       2001:470:1f04:56d::64.  This is hard-coded in
       support/sdk/c/lib6lowpan/router_address.h.  If you change the
       prefix, you must update this file, and recompile both the driver and
       any mote code which relies on it.

 - Start radvd: `/etc/init.d/radvd start`.  The version I have
       segfaults if it is started without tun0 being present; do this
       after the driver is running.

 - If you program a few motes with UDPEcho, their addresses
       are formed as above, with the low two octets of the IPv6
       address comming from the 802.15.4 short address you programmed
       them with.

 - For instance, if you program a mote with ID 101, you can try
       ping6 2001:470:1f04:56d::65
       tracert6 2001:470:1f04:56d::65
       nc6 -u 2001:470:1f04:56d::65 7
        
       (nc6 is netcat, and since the motes are running a UDP echo
       service on port 7, you should get back what you type).

       You may need to wait for the motes to check in
       and inform the driver of the route to them, before these will
       work.

 - The motes also report back statistics every 15 seconds over UDP.
       You can observe these statistics using the Listener.py
       script in $LOWPAN_ROOT/apps/UDPEcho/: `python Listener.py`.
       This is not a bad idea, since if you don't do this, the kernel
       will send ICMP error packets for each statistics packet.
       However, it does require having the tinyos python tools installed; I
       think this only requires setting PYTHONPATH to include
       $TOSROOT/support/sdk/python.

 - serial_tun installs signal handlers for SIGUSR1 and SIGUSR2:
    * SIGUSR1: dump a graphviz file of the observed network topology.
      'dot' is part of the graphviz package.
         o sudo kill -s USR1 `pgrep serial_tun`
         o cd $LOWPAN_ROOT/support/sdk/c/lib6lowpan/tunnel
         o dot -Tps nwgraph.dot -o g.ps
         o gv g.ps
    * SIGUSR2: recompute source routes to all motes, and print them to
      the console
         * sudo kill -s USR2 `pgrep serial_tun`

