#!/usr/bin/env python
# -*- python -*-

import sys
import socket
import threading
import readline
import struct, re
import signal
from ParseException import ParseException
signal.signal(signal.SIGINT, signal.SIG_DFL)

import BlipBuiltins
SHELL_PORT = 2001

class BlipShell:

    def __init__(self, addr):
        print "Opening connection to", addr
        self.remote = (addr, SHELL_PORT)
        self.sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)

        self.printers = {}
        self.parsers  = {}

        self.replyListener = BlipShell.BlipListener(self)
        self.commandListener = BlipShell.BlipCommandline(self)

        self.register(BlipBuiltins.CmdError())
        self.register(BlipBuiltins.CmdEcho())
        self.register(BlipBuiltins.CmdPing())
        self.register(BlipBuiltins.PingReply())
        self.register(BlipBuiltins.PingDone())
        self.register(BlipBuiltins.CmdIdent())
        self.register(BlipBuiltins.CmdUptime())
        self.register(BlipBuiltins.NWProg())


    def register(self, cmd_cls):
        if cmd_cls.cmd_name() != None:
            self.parsers[cmd_cls.cmd_name()] = cmd_cls
            
        self.printers[cmd_cls.cmd_id()] = cmd_cls


    def start(self):
        self.replyListener.start()
        self.commandListener.start()

    def stop(self):
        self.sock.close()
        sys.exit()

    def print_help(self, args):
        if len(args) == 1:
            cmds = [cmd for cmd in self.parsers]
            cmds = cmds + ['quit', 'help']
            cmds.sort()
            print "sdsh-2.0:",
            for c in cmds:
                print c,
            print
        else:
            try:
                cls = self.parsers[args[1]]
                print cls.__doc__
            except:
                print "Failed loading implementation for", args[1]

    class BlipListener(threading.Thread):
        def __init__(self, parent):
            self.shell = parent
            threading.Thread.__init__ ( self )

        def run(self):
            while True:
                data, addr = self.shell.sock.recvfrom(1024)
                if len(data) == 0: return

                t, = struct.unpack('>h', data[0:2])

                self.shell.printers[t].display(data[2:])

    class BlipCommandline(threading.Thread):
        def __init__(self, parent):
            self.shell = parent

            threading.Thread.__init__ ( self )

        def run(self):
            while True:
                try:
                    line = raw_input('> ')
                except EOFError:
                    self.shell.stop()

                if line == 'quit':
                    self.shell.stop()
                    
                cmd = re.split('[ ]+',line)
                if cmd[0] == '':
                    continue
                elif cmd[0] == 'help':
                    self.shell.print_help(cmd)
                    continue

                try:
                    msgdata = self.shell.parsers[cmd[0]].parse(cmd)
                    package = struct.pack(">h", self.shell.parsers[cmd[0]].cmd_id())
                    data = package + msgdata
                    self.shell.sock.sendto(data, self.shell.remote)
                except KeyError:
                    print "blipsh: %s: not implemented!" % cmd[0]
                except ParseException:
                    print self.shell.parsers[cmd[0]].__doc__

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "\n\t%s <ipaddr>\n" % sys.argv[0]
        sys.exit(1)
    s = BlipShell(sys.argv[1])
    s.start()
    
