# $Id$ #

# author: Mustafa Yuecel <mustafa.yuecel@alumni.ethz.ch> #

define AVR32_HELP

 AVR32 extras:

   debug    : compile with minimal optimization and debug symbols
   debugopt : compile with debug symbols

 Programmer options:

   batchisp     : (default) programming over USB (DFU bootloader)

endef
HELP += $(AVR32_HELP)

OBJCOPY = avr32-objcopy
OBJDUMP = avr32-objdump
NM = avr32-nm
SIZE = avr32-size
SET_ID = tos-set-symbols
NCC = ncc
#LIBS = -lm

BUILDDIR = build/$(PLATFORM)
MAIN_EXE = $(BUILDDIR)/main.exe
MAIN_MAP = $(BUILDDIR)/main.map
MAIN_DUMP = $(BUILDDIR)/main.dump
MAIN_SYM = $(BUILDDIR)/main.sym
MAIN_IHEX = $(BUILDDIR)/main.ihex
INSTALL_EXE = $(MAIN_EXE).out$(if $(NODEID),-$(NODEID),)
INSTALL_IHEX = $(MAIN_IHEX).out$(if $(NODEID),-$(NODEID),)
BOOTLOADER_SIZE = 8*1024
AMADDR = ActiveMessageAddressC\$$addr
VOLUMEFILE = volumes-at45db.xml

PFLAGS += -Wall -Wshadow $(NESC_FLAGS)
PFLAGS += -target=$(PLATFORM) -fnesc-cfile=$(BUILDDIR)/app.c
PFLAGS += -DDEF_TOS_AM_GROUP=$(DEFAULT_LOCAL_GROUP)
PFLAGS += -I../../tos/platforms/atevk1101 -I/usr/avr32/lib
# dont link against (unused) standard libaries
PFLAGS += -nostdlib -nodefaultlibs
# bootloader section size is 0x2000, application section start at 0x80002000
PFLAGS += -Wl,--entry=_trampoline,-Map=$(BUILDDIR)/main.map,--script=../../support/make/avr32/ldscripts/avr32elf_uc3b0256.lds
# workaround to disable the <avr32/eic_200.h> header (gcc generates warnings/error)
PFLAGS += -DAVR32_ABI_H_INCLUDED
#PFLAGS += -DAVR32_EIC_200_H_INCLUDED
ifdef MSG_SIZE
PFLAGS += -DTOSH_DATA_LENGTH=$(MSG_SIZE)
endif

STARTUP_FILES = ../../support/make/avr32/startup/trampoline.S ../../support/make/avr32/startup/crt0.S

BUILDLESS_DEPS += bytes

DEFAULT_PROGRAM ?= batchisp

# Use the 'if' function instead of the 'ifdef' construct because ifdef freaks
# out with call in there.  I don't know why.
$(if $(PROGRAM),,$(call TOSMake_include,avr32/$(DEFAULT_PROGRAM).extra))

ifndef NOWIRING
include $(TINYOS_MAKE_PATH)/wiring.extra
endif

ifndef BUILD_DEPS
  ifeq ($(filter $(BUILDLESS_DEPS),$(GOALS)),)
    BUILD_DEPS = exe bytes $(POST_BUILD_EXTRA_DEPS)
  endif
endif

setid: FORCE
	@cmd () { $$@; }; if [ x = x$(NODEID) ]; then cmd cp $(MAIN_IHEX) $(INSTALL_IHEX); \
                          else cmd $(SET_ID) $(MAIN_EXE) $(INSTALL_EXE) TOS_NODE_ID=$(NODEID) $(AMADDR)=$(NODEID); $(OBJCOPY) --output-target=ihex $(INSTALL_EXE) $(INSTALL_IHEX); fi

delsetid: FORCE
	@rm -f $(INSTALL_EXE) $(INSTALL_IHEX)

tosimage: ihex build_tosimage FORCE
	@:

ihex: exe FORCE
	@$(OBJCOPY) --output-target=ihex $(MAIN_EXE) $(MAIN_IHEX)

exe: exe0 bytes FORCE
	@:

exe0: builddir $(BUILD_EXTRA_DEPS) FORCE
	@echo "    compiling $(COMPONENT) to a $(PLATFORM) binary"
	$(NCC) -o $(MAIN_EXE) $(OPTFLAGS) $(PFLAGS) $(CFLAGS) $(LIBS) $(LDFLAGS) $(STARTUP_FILES) $(COMPONENT).nc
	@$(OBJDUMP) -x $(MAIN_EXE) > $(MAIN_DUMP)
	@$(NM) $(MAIN_EXE) > $(MAIN_SYM)
	@echo "    compiled $(COMPONENT) to $(MAIN_EXE)"

builddir: FORCE
	mkdir -p $(BUILDDIR)

bytes: FORCE
	@$(OBJDUMP) -h $(MAIN_EXE) | perl -ne \
          '$$b{$$1}=hex $$2 if /^\s*\d+\s*\.(reset|text|data|bss)\s+(\S+)/; END { printf("%16d bytes in ROM\n%16d bytes in RAM\n",($$b{reset}-$(BOOTLOADER_SIZE))+$$b{text}+$$b{data},$$b{data}+$$b{bss}); }'
#	@echo "    size requirements of $(COMPONENT) ($(SIZE))"
#	@$(SIZE) --format=sysv -x $(MAIN_EXE)
