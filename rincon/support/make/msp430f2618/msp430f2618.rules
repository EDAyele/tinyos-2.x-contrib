########################################################################
### msp430f2618.rules
###
### Rules for MSP430F2618
###
### Note: you'll need feex.py, msp430x.x, the 20070216 mspgcc,
###       and srec2ti.py
### 

NEWGCC_ROOT = /cygdrive/c/mspgcc

MCU_ROOT ?= $(PROJECTROOT)/tinyos-2.x-ghost
MSP_GCC  ?= $(NEWGCC_ROOT)/bin/msp430-gcc
MSP_AS   ?= $(NEWGCC_ROOT)/bin/msp430-as
OBJCOPY  ?= $(NEWGCC_ROOT)/bin/msp430-objcopy
OBJDUMP  ?= $(NEWGCC_ROOT)/bin/msp430-objdump
MSP_MCU  ?= msp430xG4618
FEEX     ?= $(MCU_ROOT)/support/make/msp430f2618/feex.py
LDSCRIPT ?= $(MCU_ROOT)/support/make/msp430f2618/msp430x2618.x
SREC2TI  ?= $(MCU_ROOT)/support/make/msp430f2618/srec2ti.py
GEN_HWC  ?= $(MCU_ROOT)/support/make/msp430f2618/hw.py
HW_CONF  ?= $(MCU_ROOT)/tos/platforms/$(PLATFORM)/hw.cfg
NCC       = ncc
LIBS      = -lm

### for setid
SET_ID = tos-set-symbols
AMADDR = ActiveMessageAddressC_feex_addr

USE_FEEX = 1

# Default nesc stuff
PFLAGS += -Wall -Wshadow $(NESC_FLAGS)
PFLAGS += -target=$(PLATFORM) -fnesc-cfile=$(BUILDDIR)/app.c -board=$(SENSORBOARD)

# Disable MSP430 hardware multiply because it makes MSPGCC die
PFLAGS += -mdisable-hwmul

# Needed since platform dir not in TOS distro
PFLAGS += -I$(MCU_ROOT)/tos/platforms/$(PLATFORM)

# Trigger gcc rules
CFLAGS += -D__MSP430_2618__

# Add 2618-specific internal flash support
# for DirectStorage
CFLAGS += -D__MSP430_HAS_FLASH2__

# Hmph. Inherited from elsewhere.
OPTFLAGS += -O

DEFAULT_PROGRAM ?= bsl
$(if $(PROGRAM),,$(call TOSMake_include,msp430f2618/$(DEFAULT_PROGRAM).extra))

BUILDLESS_DEPS += bytes

BUILDDIR  = build/$(PLATFORM)
PFLAGS   += -I$(BUILDDIR)

ifneq ($(wildcard $(VOLUME_FILE)), )
$(BUILDDIR)/StorageVolumes.h:	$(VOLUME_FILE)
	$(VOLUME_ALLOCATOR) $(PLATFORMDIR) <$(VOLUME_FILE) >$@ || rm -f $@

zagnut:	$(BUILDDIR)/StorageVolumes.h FORCE

else

zagnut:	
	@:

endif

ifndef BUILD_DEPS
  ifeq ($(filter $(BUILDLESS_DEPS),$(GOALS)),)
    BUILD_DEPS = tosimage $(POST_BUILD_EXTRA_DEPS)
  endif
endif

BUILD_DEPS ?= srecimage $(POST_BUILD_EXTRA_DEPS)

### PFLAGS that oughtta be in CFLAGS
XCFLAGS = -DDEF_TOS_AM_GROUP=$(DEFAULT_LOCAL_GROUP)
ifdef MSG_SIZE
XCFLAGS += -DTOSH_DATA_LENGTH=$(MSG_SIZE)
endif

MAIN_EXE  = $(BUILDDIR)/main.exe
MAIN_SREC = $(BUILDDIR)/main.srec
MAIN_TEXT = $(BUILDDIR)/main.txt
MAIN_DUMP = $(BUILDDIR)/main.dump

INSTALL_SREC = $(MAIN_SREC).out$(if $(NODEID),-$(NODEID),)
INSTALL_TEXT = $(subst .srec.,.txt.,$(INSTALL_SREC))

########################################
### special platform rules

builddir:	FORCE
	mkdir -p $(BUILDDIR)

setid: FORCE
	@echo "Setting node ID to $(NODEID)"
	@cmd () { echo "$$@"; $$@; }; if [ x = x$(NODEID) ]; then cmd cp $(MAIN_SREC) $(INSTALL_SREC); else cmd $(SET_ID) --objcopy $(OBJCOPY) --objdump $(OBJDUMP) --target srec $(MAIN_SREC) $(INSTALL_SREC) TOS_NODE_ID=$(NODEID) $(AMADDR)=$(NODEID); fi

tosimage:	dump srec build_feeximage FORCE

build_feeximage:	$(BUILDDIR)/app.c
	@:

titext:	FORCE
	@echo "****************************************"
	@echo "*** converting $(COMPONENT) to TITEXT"
	$(SREC2TI) < $(INSTALL_SREC) > $(INSTALL_TEXT)

srec:	exe FORCE
	@echo "****************************************"
	@echo "*** converting $(COMPONENT) to SREC"
	$(OBJCOPY) --output-target=srec $(MAIN_EXE) $(MAIN_SREC)

dump:	exe FORCE
	@echo "****************************************"
	@echo "*** dumping $(COMPONENT) symbols"
	$(OBJDUMP) -x $(MAIN_EXE) > $(MAIN_DUMP) || { rm -f $(MAIN_DUMP); exit 1; }

ifeq ($(PLATFORM),hill)
$(BUILDDIR)/hw.c:	FORCE
	@echo "****************************************"
	@echo "*** Generating guts of MotePlatformC from $(HW_CONF)"
	$(GEN_HWC) $(HW_CONF) > $@
else
$(BUILDDIR)/hw.c:	FORCE
	@:
endif

$(BUILDDIR)/app.c:	builddir $(BUILDDIR)/hw.c zagnut FORCE
	@echo "    updating version.h"
	@echo "#ifndef VERSION_H" > ${PROJECTROOT}/version.h
	@echo "#define VERSION_H" >> ${PROJECTROOT}/version.h
	@echo -n "#define SOFTWARE_VERSION " >> ${PROJECTROOT}/version.h
	@sed -n 4p ${PROJECTROOT}/.svn/entries >> ${PROJECTROOT}/version.h
	@echo -e "#endif\n" >> ${PROJECTROOT}/version.h
	@echo "****************************************"
	@echo "*** compiling $(COMPONENT) to C code"
	PATH="$(NEWGCC_ROOT)/bin:$$PATH" $(NCC) -conly $(OPTFLAGS) $(PFLAGS) $(CFLAGS) $(WIRING_CHECK_FLAGS) $(COMPONENT).nc
ifdef WIRING_CHECK_FILE
	@nescc-wiring $(WIRING_CHECK_FILE)
endif

$(BUILDDIR)/app.s:	$(BUILDDIR)/app.c FORCE
	@echo "****************************************"
	@echo "*** translating $(COMPONENT) to ASM code"
	$(MSP_GCC) -mdisable-hwmul -mmcu=$(MSP_MCU) $(CFLAGS) $(XCFLAGS) $(OPTFLAGS) -Wall -Wshadow -c -fdollars-in-identifiers -S $< && mv app.s $(BUILDDIR)

$(BUILDDIR)/app.asm:	$(BUILDDIR)/app.s FORCE
	@echo "****************************************"
	@echo "*** rewriting ASM code for $(COMPONENT)"
	$(FEEX) $(FEEX_OPTS) $< > $@ || { rm -f $@; exit 1; }

$(BUILDDIR)/app.o:	$(BUILDDIR)/app.asm FORCE
	@echo "****************************************"
	@echo "*** assembling $(COMPONENT)"
	$(MSP_AS) -mmcu=$(MSP_MCU) $< -o $@

exe:	exe0 bytes FORCE
	@:

exe0:	$(BUILDDIR)/app.o FORCE
	@echo "****************************************"
	@echo "*** linking $(COMPONENT)"
	PATH="$(NEWGCC_ROOT)/bin:$$PATH" $(MSP_GCC) -mmcu=$(MSP_MCU) -Wl,-T,$(LDSCRIPT) -o $(MAIN_EXE) $< $(LIBS) $(LDFLAGS)

bytes: FORCE
	@echo "****************************************"
	@echo "*** Dumping $(COMPONENT) stats"
	@$(OBJDUMP) -h $(MAIN_EXE) | perl -ne '$$b{$$1}=hex $$2 if /^\s*\d+\s*\.(far|text|data|bss)\s+(\S+)/; END { printf("%16d bytes in ROM\n%16d bytes in RAM\n",$$b{text}+$$b{data}+$$b{far},$$b{data}+$$b{bss}); }'

### EOF msp430f2618.rules

