#!/usr/bin/env mzscheme -u

#lang scheme

(require scheme/port srfi/13
         (file "sensor-net.scm"))

; ssgw 
; 

(define *listen-port* 7828)

(define *serial-port* "sf@localhost")

(define (set-port! p) (set! *listen-port* p))

(define (set-serial! s) (set! *serial-port* s))

(define (reset-state!) #f)

(define (open-comm-ports s)
  (cond [(string-prefix? "serial@" s) (let* ([serial (string-drop s (string-length "serial@"))]
                                             [sep (string-index serial #\:)]
                                             [speed (if sep (string-drop serial (+ 1 sep)) 57600)] 
                                             [port (if sep (string-take serial sep) serial)])
                                        (open-input-output-file port #:exists 'append))]
        [(string-prefix? "sf@" s) (let* ([sf (string-drop s (string-length "sf@"))]
                                         [sep (string-index sf #\:)]
                                         [port (if sep (string->number (string-drop sf (+ 1 sep))) 9002)] 
                                         [addr (if sep (string-take sf sep) sf)])
                                    (tcp-connect addr port))]
        [else (raise-user-error "no valid serial communication port specified")])
  )

(define (send-to-net line path sout)
  (let* ([msg (read (open-input-bytes line))]
         [encoded (net-encode-mapfile (case (car msg)
                                        [(disseminate) (second msg)]
                                        [(deliver handoff) (third msg)]
                                        [else (raise-user-error "unknown protocol specified: " (car msg))]) path)])
    (printf "received message: ~s~n" msg)
    (printf "~s~n" encoded)))

(define (main argv)
  (let*-values 
      ([(base) (command-line #:argv argv
                             #:help-labels 
                             "deamon process that keeps connection with sensor network through gateway"
                             "params:" "-base: the name of the base config location as generated by ssbuild"
                             "opens socket for command connections, and forwards received messages to connected clients"
                             "each command or received message is an s-expr, of the following shapes"
                             "commands:"
                             " - (disseminate `msg`) : to disseminate into the whole network"
                             " - (deliver `addr` `msg`) : delliver to a specific node across multiple hops"
                             " - (handoff `addr` `msg`) : handoff a message in direct reach of the GW"
                             "results:"
                             " - {intercept `src` `msg`} : a node sending an intercept message to the gw as its parent"
                             " - {forward `src` `msg`}"
                             " - {send `src` `dst` `msg`}"
                             "ssgw handles the translation between string-literal stymbols and their "
                             "  numeric equivalent on the network"
                             "upon new connection, starts by sending the base config location"
                             #:once-each
                             (("-c" "--comm") serial "name of the serial port to connect to network" (set-serial! serial))
                             (("-p" "--port") port "TCP port to listen on (default 7828)" (set-port! port))
                             (("-r" "--reset") "resets the locally kept state of the network. does not influence the nodes themselves"
                                               (reset-state!))
                             #:args (base) (path->complete-path base))]
       [(sin sout) (open-comm-ports *serial-port*)]
       [(sin-evt) (read-string-evt 1 sin)]
       [(acc-evt) (tcp-accept-evt (tcp-listen *listen-port*))]
       
       [(client-sock-ls) null])
    
    (file-stream-buffer-mode sin 'none)
    (file-stream-buffer-mode sout 'none)
    (printf "SensorScheme gateway deamon~nBase configuration path: ~a~n" base)
    (with-input-from-file (build-path base "config.ncf") read)
    
    (let loop () 
      (printf "~s~n" (apply sync (handle-evt acc-evt (lambda (s) 
                                                       (set! client-sock-ls (cons s client-sock-ls))
                                                       (file-stream-buffer-mode (second s) 'line)
                                                       (fprintf (second s) "~a~n" base)))
                            #;(handle-evt sin-evt (lambda (e) (printf "~s~n" e)))
                            (append (map (lambda (s) (handle-evt (eof-evt (car s)) (lambda (ln) 
                                                                                     (printf "eof!!~n")
                                                                                     (close-input-port (car s))
                                                                                     (close-output-port (cadr s))
                                                                                     (set! client-sock-ls 
                                                                                           (filter (lambda (el) (not (equal? s el)))
                                                                                                   client-sock-ls))))) client-sock-ls)
                                    (map (lambda (s) (handle-evt (read-bytes-line-evt (car s) 'linefeed) 
                                                                 (lambda (ln) (when (not (eof-object? ln)) (send-to-net ln base sout)))))
                                         client-sock-ls)))) 
      (loop))))

(main (current-command-line-arguments))