/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'dataMsg'
 * message type.
 */

public class dataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 15;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new dataMsg of size 15. */
    public dataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new dataMsg of the given data_length. */
    public dataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg with the given data_length
     * and base offset.
     */
    public dataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg using the given byte array
     * as backing store.
     */
    public dataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public dataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public dataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg embedded in the given message
     * at the given base offset.
     */
    public dataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dataMsg embedded in the given message
     * at the given base offset and length.
     */
    public dataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <dataMsg> \n";
      try {
        s += "  [sourceaddr=0x"+Long.toHexString(get_sourceaddr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [originaddr=0x"+Long.toHexString(get_originaddr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [originalSequenceNumber=0x"+Long.toHexString(get_originalSequenceNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [packetTransmissions=0x"+Long.toHexString(get_packetTransmissions())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [totalOwnTraffic=0x"+Long.toHexString(get_totalOwnTraffic())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [totalRelayedTraffic=0x"+Long.toHexString(get_totalRelayedTraffic())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopcount=0x"+Long.toHexString(get_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [localLoad=0x"+Long.toHexString(get_localLoad())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sourceaddr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sourceaddr' is signed (false).
     */
    public static boolean isSigned_sourceaddr() {
        return false;
    }

    /**
     * Return whether the field 'sourceaddr' is an array (false).
     */
    public static boolean isArray_sourceaddr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sourceaddr'
     */
    public static int offset_sourceaddr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sourceaddr'
     */
    public static int offsetBits_sourceaddr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'sourceaddr'
     */
    public int get_sourceaddr() {
        return (int)getUIntBEElement(offsetBits_sourceaddr(), 16);
    }

    /**
     * Set the value of the field 'sourceaddr'
     */
    public void set_sourceaddr(int value) {
        setUIntBEElement(offsetBits_sourceaddr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sourceaddr'
     */
    public static int size_sourceaddr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sourceaddr'
     */
    public static int sizeBits_sourceaddr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: originaddr
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'originaddr' is signed (false).
     */
    public static boolean isSigned_originaddr() {
        return false;
    }

    /**
     * Return whether the field 'originaddr' is an array (false).
     */
    public static boolean isArray_originaddr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'originaddr'
     */
    public static int offset_originaddr() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'originaddr'
     */
    public static int offsetBits_originaddr() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'originaddr'
     */
    public int get_originaddr() {
        return (int)getUIntBEElement(offsetBits_originaddr(), 16);
    }

    /**
     * Set the value of the field 'originaddr'
     */
    public void set_originaddr(int value) {
        setUIntBEElement(offsetBits_originaddr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'originaddr'
     */
    public static int size_originaddr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'originaddr'
     */
    public static int sizeBits_originaddr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: originalSequenceNumber
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'originalSequenceNumber' is signed (false).
     */
    public static boolean isSigned_originalSequenceNumber() {
        return false;
    }

    /**
     * Return whether the field 'originalSequenceNumber' is an array (false).
     */
    public static boolean isArray_originalSequenceNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'originalSequenceNumber'
     */
    public static int offset_originalSequenceNumber() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'originalSequenceNumber'
     */
    public static int offsetBits_originalSequenceNumber() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'originalSequenceNumber'
     */
    public int get_originalSequenceNumber() {
        return (int)getUIntBEElement(offsetBits_originalSequenceNumber(), 16);
    }

    /**
     * Set the value of the field 'originalSequenceNumber'
     */
    public void set_originalSequenceNumber(int value) {
        setUIntBEElement(offsetBits_originalSequenceNumber(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'originalSequenceNumber'
     */
    public static int size_originalSequenceNumber() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'originalSequenceNumber'
     */
    public static int sizeBits_originalSequenceNumber() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: packetTransmissions
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'packetTransmissions' is signed (false).
     */
    public static boolean isSigned_packetTransmissions() {
        return false;
    }

    /**
     * Return whether the field 'packetTransmissions' is an array (false).
     */
    public static boolean isArray_packetTransmissions() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'packetTransmissions'
     */
    public static int offset_packetTransmissions() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'packetTransmissions'
     */
    public static int offsetBits_packetTransmissions() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'packetTransmissions'
     */
    public int get_packetTransmissions() {
        return (int)getUIntBEElement(offsetBits_packetTransmissions(), 16);
    }

    /**
     * Set the value of the field 'packetTransmissions'
     */
    public void set_packetTransmissions(int value) {
        setUIntBEElement(offsetBits_packetTransmissions(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'packetTransmissions'
     */
    public static int size_packetTransmissions() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'packetTransmissions'
     */
    public static int sizeBits_packetTransmissions() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: totalOwnTraffic
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'totalOwnTraffic' is signed (false).
     */
    public static boolean isSigned_totalOwnTraffic() {
        return false;
    }

    /**
     * Return whether the field 'totalOwnTraffic' is an array (false).
     */
    public static boolean isArray_totalOwnTraffic() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'totalOwnTraffic'
     */
    public static int offset_totalOwnTraffic() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'totalOwnTraffic'
     */
    public static int offsetBits_totalOwnTraffic() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'totalOwnTraffic'
     */
    public int get_totalOwnTraffic() {
        return (int)getUIntBEElement(offsetBits_totalOwnTraffic(), 16);
    }

    /**
     * Set the value of the field 'totalOwnTraffic'
     */
    public void set_totalOwnTraffic(int value) {
        setUIntBEElement(offsetBits_totalOwnTraffic(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'totalOwnTraffic'
     */
    public static int size_totalOwnTraffic() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'totalOwnTraffic'
     */
    public static int sizeBits_totalOwnTraffic() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: totalRelayedTraffic
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'totalRelayedTraffic' is signed (false).
     */
    public static boolean isSigned_totalRelayedTraffic() {
        return false;
    }

    /**
     * Return whether the field 'totalRelayedTraffic' is an array (false).
     */
    public static boolean isArray_totalRelayedTraffic() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'totalRelayedTraffic'
     */
    public static int offset_totalRelayedTraffic() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'totalRelayedTraffic'
     */
    public static int offsetBits_totalRelayedTraffic() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'totalRelayedTraffic'
     */
    public int get_totalRelayedTraffic() {
        return (int)getUIntBEElement(offsetBits_totalRelayedTraffic(), 16);
    }

    /**
     * Set the value of the field 'totalRelayedTraffic'
     */
    public void set_totalRelayedTraffic(int value) {
        setUIntBEElement(offsetBits_totalRelayedTraffic(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'totalRelayedTraffic'
     */
    public static int size_totalRelayedTraffic() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'totalRelayedTraffic'
     */
    public static int sizeBits_totalRelayedTraffic() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopcount
    //   Field type: short, unsigned
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopcount' is signed (false).
     */
    public static boolean isSigned_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'hopcount' is an array (false).
     */
    public static boolean isArray_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopcount'
     */
    public static int offset_hopcount() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopcount'
     */
    public static int offsetBits_hopcount() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'hopcount'
     */
    public short get_hopcount() {
        return (short)getUIntBEElement(offsetBits_hopcount(), 8);
    }

    /**
     * Set the value of the field 'hopcount'
     */
    public void set_hopcount(short value) {
        setUIntBEElement(offsetBits_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopcount'
     */
    public static int size_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopcount'
     */
    public static int sizeBits_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: localLoad
    //   Field type: int, unsigned
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'localLoad' is signed (false).
     */
    public static boolean isSigned_localLoad() {
        return false;
    }

    /**
     * Return whether the field 'localLoad' is an array (false).
     */
    public static boolean isArray_localLoad() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'localLoad'
     */
    public static int offset_localLoad() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'localLoad'
     */
    public static int offsetBits_localLoad() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'localLoad'
     */
    public int get_localLoad() {
        return (int)getUIntBEElement(offsetBits_localLoad(), 16);
    }

    /**
     * Set the value of the field 'localLoad'
     */
    public void set_localLoad(int value) {
        setUIntBEElement(offsetBits_localLoad(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'localLoad'
     */
    public static int size_localLoad() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'localLoad'
     */
    public static int sizeBits_localLoad() {
        return 16;
    }

}
